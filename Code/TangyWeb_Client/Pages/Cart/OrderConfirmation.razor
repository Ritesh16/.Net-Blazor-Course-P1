@page "/OrderConfirmation"

@inject ILocalStorageService _localStorageService
@inject IOrderService _orderService

<div class="container">
    @if (IsProcessing)
    {
        <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
            <img src="images/loading.gif" />
        </div>
    }
    else
    {
        @if(Order.OrderHeader.Status == Constants.Status_Confirmed)
        {
            <div class="row mt-4 pt-4">
                <div class="col-10 offset-1 text-center">
                    <h2 class="text-warning">Order Confirmed</h2>
                    <p>Your order has been placed successfully with order id : @Order.OrderHeader.Id</p>
                </div>
                <div class="col-8 offset-2">
                    <img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
                </div>
            </div>
        }
        else
        {
                    <div class="row mt-4 pt-4">
            <div class="col-10 offset-1 text-center">
                <h2 class="text-warning">Order Issue!</h2>
                <p>Your order had payment issue. Please contact us with Order Id : @Order.OrderHeader.Id</p>
            </div>
            <div class="col-8 offset-2">
                <img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
            </div>
        </div>

        }
    }
</div>
@code {
    private bool IsProcessing { get; set; }
    private OrderDto Order { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Order = await _localStorageService.GetItemAsync<OrderDto>(Constants.OrderDetails);

        var updatedOrder = await _orderService.MarkPaymentSuccessful(Order.OrderHeader);
        Order.OrderHeader.Status = updatedOrder.Status;
        if(updatedOrder.Status == Constants.Status_Confirmed)
        {
            await _localStorageService.RemoveItemAsync(Constants.OrderDetails);
            await _localStorageService.RemoveItemAsync(Constants.ShoppingCart);
        }

        IsProcessing = false;
    }
}
