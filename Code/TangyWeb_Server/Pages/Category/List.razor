@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<_DeleteConfirmation IsParentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>

    <div class="col-12">
        @if (categories.Any())
        {
            <table class="table-bordered" style="width:100%; border-color:#dee2e6;padding:inherit">
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <NavLink href=@($"/category/edit/{category.Id}") class="btn-primary btn">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>Delete(category.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div style="text-align:center">
                    <img src="images/loading.gif" />
                </div>
            }
            else
            {
                <p>No catgeories found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDto> categories = new List<CategoryDto>();
    private int DeletedCategoryId { get; set; } = 0;

    public bool IsLoading { get; set; } = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void Delete(int id)
    {
        DeletedCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmation");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeletedCategoryId != 0)
        {
            await _categoryRepository.Delete(DeletedCategoryId);
            await LoadCategories();
        }

        await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmation");

        IsLoading = false;
    }
}
