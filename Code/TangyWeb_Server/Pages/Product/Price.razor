@page "/product/price/{id:int}"
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
 @if (IsLoading)
{
    <div style="text-align:center">
        <img src="images/loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>Category : @Product.Category.Name</span> <br />
                Description : <span>@((MarkupString)Product.Description)</span>
            </div>
        </div>
        <div class="col-md-1">
            <img src="@Product.ImageUrl" class="w-100">
        </div>

    </div>

    <SfGrid DataSource="@ProductPrices" AllowPaging="true" Toolbar="@(new List<string>{"Add", "Edit", "Delete", "Update"})">
        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" ShowDeleteConfirmDialog="true"></GridEditSettings>
        <GridEvents OnActionBegin="GridActionHandler" TValue="ProductPriceDto">

        </GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(ProductPriceDto.Id) HeaderText="ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDto.Size) HeaderText="Size" Width="150">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="sizeList" TItem="string" TValue="string" @bind-Value="((context as ProductPriceDto).Size)">

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDto.Price) HeaderText="Price" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        </GridColumns>
    </SfGrid>

}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDto Product { get; set; } = new();
    private IEnumerable<ProductPriceDto> ProductPrices { get; set; } = new List<ProductPriceDto>();
    private bool IsLoading { get; set; } = true;

    private IEnumerable<string> sizeList = new List<string>()
        {
            "Small", "Medium", "Large", "8oz", "16oz", "24oz"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Product.Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async void GridActionHandler(ActionEventArgs<ProductPriceDto> args)
    {
         
    }
}
